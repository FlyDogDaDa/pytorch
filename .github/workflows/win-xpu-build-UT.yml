name: windows-build-xpu

on:
  push:
    tags:
      - ciflow/xpu/*
  workflow_dispatch:

      inputs:
        win-runner:
            required: false
            type: string
            default: "windows.4xlarge.nonephemeral"
            description: |
              Label of the runner this job should run on.
        install-bundle:
            required: false
            type: boolean
            default: false
            description: |
              Install oneAPI bundle(Y) or not(N).
        build-environment:
            required: false
            type: string
            default: "xpu"
            description: Top-level label for what's being built/tested.
        s3-bucket:
            description: S3 bucket to download artifact
            required: false
            type: string
            default: "gha-artifacts" 
            
env:
    conda_env: 'xpu_venv'
    conda_path: 'C:\Jenkins\Miniconda3'
    python_version: '3.10'
    USE_XPU: 1
    VS2022INSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools'

jobs:
  Preparation:
    runs-on: ["${{ inputs.win-runner }}"]
    steps:
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@main
        with:
          no-sudo: true

      - name: Install oneAPI bundle
        shell: cmd
        if: ${{ inputs.install-bundle }}
        run: |
          call .ci\pytorch\win-test-helpers\installation-helpers\install_oneapi_bundle.bat
    
      - name: Set conda environment
        shell: cmd
        run: |
          call %conda_path%\Scripts\activate.bat
          call conda remove -n %conda_env% --all -y
          call conda create -n %conda_env% python=%python_version% -y
          call conda activate %conda_env%
          call conda install cmake==3.26.4 ninja -y
          call conda remove ucrt -y
          call pip install pyyaml
          call conda list

  Build-whls:
    runs-on: ["${{ inputs.win-runner }}"]
    needs: [Preparation]
    steps:
     - name: Build Torch
       shell: cmd
       run: |
         call %conda_path%\Scripts\activate.bat %conda_env%
         call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
         if exist "pytorch" (
           rmdir /s /q "pytorch"
         )
         git clone https://github.com/pytorch/pytorch.git pytorch > git_pytorch_repo_log.txt
         cd pytorch
         call conda install conda-forge::rust -y
         call conda install typing_extensions -y
         python -m pip install -r requirements.txt > pip_install_pytorch_requirements_log.txt
         python setup.py bdist_wheel > build_torch_wheel_log.txt
         
     - name: Build TorchVision
       shell: cmd
       run: |
        call %conda_path%\Scripts\activate.bat %conda_env%
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        set DISTUTILS_USE_SDK=1
        if exist "vision" ( 
          rmdir /s /q "vision"
        )
        git clone https://github.com/pytorch/vision.git vision > git_vision_repo_log.txt
        for %%f in (pytorch\dist\torch-*.whl) do (
          set "TORCH_WHL=%%f"
          echo "INFO - torch whl found"
        )
        if defined TORCH_WHL (
          pip install %TORCH_WHL%
          echo "INFO - torch whl installed"
        ) else (
          echo "INFO - No torch whl found."
          exit /b 1
        )
        cd vision
        pip install -r docs\requirements.txt > pip_install_vision_requirements_log.txt
        echo "INFO - Building torchvision wheel"
        python setup.py bdist_wheel > build_vision_wheel_log.txt
        echo "INFO - torchvision wheel built"
        conda list

  Upload-artifacts:
    runs-on: ["${{ inputs.win-runner }}"]
    needs: [Preparation,Build-whls]
    steps:
    - name: Upload pytorch wheel
      uses: actions/upload-artifact@v2
      with:
        name: pytorch wheel
        path: 'pytorch\dist'

    - name: Upload torchvision wheel
      uses: actions/upload-artifact@v2
      with:
        name: torchvision wheel
        path: 'vision\dist'

    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: |
          pytorch\git_pytorch_repo_log.txt
          pytorch\pip_install_pytorch_requirements_log.txt
          pytorch\build_torch_wheel_log.txt
          vision\git_vision_repo_log.txt
          vision\pip_install_vision_requirements_log.txt
          vision\build_vision_wheel_log.txt

    - name: Store PyTorch Build Artifacts on S3
      uses: seemethere/upload-artifact-s3@v5
      with:
        name: ${{ inputs.build-environment }}
        retention-days: 14
        if-no-files-found: error
        path: |
          pytorch\dist\torch-*.whl
          vision\dist\torchvision-*.whl
        s3-bucket: ${{ inputs.s3-bucket }}
          
    - name: Teardown Windows
      uses: ./.github/actions/teardown-win
      if: always()
      timeout-minutes: 120
      with:
          extra-delete-dir: /c/${{ github.run_id }}/build-results/
